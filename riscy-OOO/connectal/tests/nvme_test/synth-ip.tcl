source "board.tcl"

if {$boardname == {nfsume}} {
    set partname {xc7vx690tffg1761-3}
    set databuswidth 128
    set pcie_blk_locn {X0Y0}
}
if {$boardname == {vc709}} {
    set partname {xc7vx690tffg1761-2}
    set databuswidth 128
    set pcie_blk_locn {X0Y2}
}
if {$boardname == {miniitx100}} {
    set databuswidth 128
    set pcie_blk_locn {X1Y0}
}
if {$boardname == {zc706}} {
    set databuswidth 128
    set pcie_blk_locn {X1Y0}
}
if {$boardname == {vc707g2}} {
    set databuswidth 128
    set pcie_blk_locn {X1Y1}
}
puts "partname=$partname"
puts "databuswidth=$databuswidth"

create_project -name local_synthesized_ip -in_memory -part $partname
if {$boardname == {nfsume}} {
    set_property board_part xilinx.com:vc709:part0:1.0 [current_project]
}
proc fpgamake_ipcore {core_name core_version ip_name params} {
    global ipdir boardname

    set generate_ip 0

    if [file exists $ipdir/$boardname/$ip_name/$ip_name.xci] {
    } else {
	puts "no xci file $ip_name.xci"
	set generate_ip 1
    }
    if [file exists $ipdir/$boardname/$ip_name/vivadoversion.txt] {
	gets [open $ipdir/$boardname/$ip_name/vivadoversion.txt r] generated_version
	set current_version [version -short]
	puts "core was generated by vivado $generated_version, currently running vivado $current_version"
	if {$current_version != $generated_version} {
	    puts "vivado version does not match"
	    set generate_ip 1
	}
    } else {
	puts "no vivado version recorded"
	set generate_ip 1
    }

    ## check requested core version and parameters
    if [file exists $ipdir/$boardname/$ip_name/coreversion.txt] {
	gets [open $ipdir/$boardname/$ip_name/coreversion.txt r] generated_version
	set current_version "$core_name $core_version $params"
	puts "Core generated: $generated_version"
	puts "Core requested: $current_version"
	if {$current_version != $generated_version} {
	    puts "core version or params does not match"
	    set generate_ip 1
	}
    } else {
	puts "no core version recorded"
	set generate_ip 1
    }

    if $generate_ip {
	file delete -force $ipdir/$boardname/$ip_name
	file mkdir $ipdir/$boardname
	create_ip -name $core_name -version $core_version -vendor xilinx.com -library ip -module_name $ip_name -dir $ipdir/$boardname
	if [llength $params] {
	    set_property -dict $params [get_ips $ip_name]
	}
        report_property -file $ipdir/$boardname/$ip_name.properties.log [get_ips $ip_name]
	
	generate_target all [get_files $ipdir/$boardname/$ip_name/$ip_name.xci]

	set versionfd [open $ipdir/$boardname/$ip_name/vivadoversion.txt w]
	puts $versionfd [version -short]
	close $versionfd

	set corefd [open $ipdir/$boardname/$ip_name/coreversion.txt w]
	puts $corefd "$core_name $core_version $params"
	close $corefd
    } else {
	read_ip $ipdir/$boardname/$ip_name/$ip_name.xci
    }
    if [file exists $ipdir/$boardname/$ip_name/$ip_name.dcp] {
    } else {
	synth_ip [get_ips $ip_name]
    }
}

if {$partname != {xc7vx690tffg1761-2} && $partname != {xc7vx690tffg1761-3}} {
    fpgamake_ipcore axi_pcie 2.8 axi_pcie_rp [list \
						  CONFIG.AXIBAR2PCIEBAR_0 {0x00000000} \
						  CONFIG.AXIBAR_0 {0x00000000} \
						  CONFIG.AXIBAR_HIGHADDR_0 {0xfFFFFFFF} \
						  CONFIG.BAR0_SCALE {Gigabytes} \
						  CONFIG.BAR0_SIZE {1} \
						  CONFIG.BASEADDR {0x00000000} \
						  CONFIG.BASE_CLASS_MENU {Bridge_device} \
						  CONFIG.DEVICE_ID {0x7022} \
						  CONFIG.HIGHADDR {0xffffffff} \
						  CONFIG.INCLUDE_BAROFFSET_REG {false} \
						  CONFIG.INCLUDE_RC {Root_Port_of_PCI_Express_Root_Complex} \
						  CONFIG.MAX_LINK_SPEED {5.0_GT/s} \
						  CONFIG.M_AXI_DATA_WIDTH {128} \
						  CONFIG.NO_OF_LANES {X4} \
						  CONFIG.NUM_MSI_REQ {5} \
						  CONFIG.PCIE_BLK_LOCN $pcie_blk_locn \
						  CONFIG.SUB_CLASS_INTERFACE_MENU {InfiniBand_to_PCI_host_bridge} \
						  CONFIG.S_AXI_DATA_WIDTH {128} \
						  CONFIG.S_AXI_SUPPORTS_NARROW_BURST {true} \
						  CONFIG.shared_logic_in_core {true} \
						 ]
} else {
    if {[version -short] >= "2016.1"} {
	set axi_pcie3_version 2.1
    } else {
	set axi_pcie3_version 2.0
    }
    fpgamake_ipcore axi_pcie3 $axi_pcie3_version axi_pcie_rp [list \
						   CONFIG.axi_data_width {128_bit} \
						   CONFIG.axibar_highaddr_0 {0xffffffffffffffff} \
						   CONFIG.dedicate_perst {false} \
						   CONFIG.device_port_type {Root_Port_of_PCI_Express_Root_Complex} \
						   CONFIG.mode_selection {Advanced} \
						   CONFIG.pcie_blk_locn $pcie_blk_locn \
						   CONFIG.pf0_bar0_scale {Gigabytes} \
						   CONFIG.pf0_bar0_size {2} \
						   CONFIG.pf0_base_class_menu {Bridge_device} \
						   CONFIG.pf0_class_code {060700} \
						   CONFIG.pf0_class_code_base {06} \
						   CONFIG.pf0_class_code_sub {07} \
						   CONFIG.pf0_device_id {7131} \
						   CONFIG.pf0_sub_class_interface_menu {CardBus_bridge} \
						   CONFIG.pl_link_cap_max_link_speed {5.0_GT/s} \
						   CONFIG.pl_link_cap_max_link_width {X4} \
						   CONFIG.s_axi_id_width {4} \
						  ]
}

if {[version -short] >= "2016.1"} {
    set dual_clock_axis_fifo_version 13.1
} else {
    set dual_clock_axis_fifo_version 13.0
}
fpgamake_ipcore fifo_generator $dual_clock_axis_fifo_version dual_clock_axis_fifo_32x8 [list \
                           CONFIG.INTERFACE_TYPE {AXI_STREAM} \
                           CONFIG.Clock_Type_AXI {Independent_Clock} \
                           CONFIG.TDATA_NUM_BYTES {4} \
                           CONFIG.TUSER_WIDTH {0} \
                           CONFIG.Enable_TLAST {true} \
                           CONFIG.HAS_TKEEP {true} \
                           CONFIG.FIFO_Application_Type_axis {Data_FIFO} \
                           CONFIG.Reset_Type {Asynchronous_Reset} \
                           ]

